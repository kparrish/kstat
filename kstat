#!/opt/kitchingroup/enthought/epd-7.3-2-rh5-x86_64/bin/python

import argparse
import subprocess as sub
import sys
import os
import xml.etree.ElementTree as ET

def getCores():
    xml = sub.check_output(['pbsnodes', '-x'])
    root = ET.fromstring(xml)
    cores = 0
    for name in root.findall('Node'):
        if name.find('state').text != 'down':
            cores = cores + int(name.find('np').text)
    return cores

totalprocs = getCores()
groups = ['mcgaugheygroup', 'kitchingroup', 'viswanathangroup', 'maloneygroup']

def groupName(groups, USER):
	"""
	Returns index of current user's group.
	"""
	grepped = ''
	for i, g in enumerate(groups):
		grepped += sub.check_output('getent group | grep {0}'.format(g), shell=True)
	lined = grepped.split('\n')
	for i, l in enumerate(lined):
		index = l.find(USER)
		if index != -1:
			return i
	return -1	


def valueBar(numprocs, totalprocs):
	rawPercent = round(float(numprocs) / float(totalprocs), 2)
	percent = 4 * int(10 * round(4 * float(numprocs) / float(totalprocs), 1) / 4) # out of 40
	bar = '['
	for i in range(percent):
		bar += '#'
	for i in range(40 - percent):
		bar += '-'
	bar += ']'
	sys.stdout.write('\t' + str(int(100 * rawPercent)) + '% ' + bar + '\n')


def userNumber(userName):
	userName = userName[:8] if len(userName) > 8 else userName # qstat truncates to 8 chars
	try:
		grepped = sub.check_output('qstat -n -1 | grep {0}'.format(userName), shell=True)
	except:
		return 0

	lined = grepped.split('\n')
	numprocs = 0
	for i, l in enumerate(lined):
		procs = l.split()
		if len(procs) != 0:
			if procs[9] == 'R':
				procs = procs[11] # take processor argument
				numprocs += procs.count('/')
	return numprocs


def groupNumber(groupName, verbose):
	groupNames = groupUsers(groupName)
	numprocs = 0
	for i in range(len(groupNames)):
		userprocs = userNumber(groupNames[i].rstrip())
		if verbose:
			sys.stdout.write(groupNames[i].rstrip() + ': ' + str(userprocs) + '\n')
		numprocs += userprocs
	return numprocs


def groupUsers(groupName):
	grepped = sub.check_output('getent group | grep {0}'.format(groupName), shell=True)
	groupNames = grepped.split(':')[3]
	groupNames = groupNames.split(',')
	for i, g in enumerate(groupNames):
		groupNames[i] = g.strip('\n\t ')
	return groupNames


if __name__ == "__main__":
	parser = argparse.ArgumentParser(description='Username for qstat -n.')
	USER = sub.check_output('echo $USER', shell=True)
	USER = USER.rstrip()
	groupNum = groupName(groups, USER)
	GROUP = groups[groupNum]
	parser.add_argument('-n', '--number', nargs='?', const=USER, default=None, help='username')
	parser.add_argument('-g', '--group', nargs='?', const=GROUP, default=None, help='groupname')
	parser.add_argument('-t', '--total', action='store_true', help='total')
	parser.add_argument('-d', '--detail', action='store_true', help='detail')
	parser.add_argument('-q', '--quiet', action='store_true', help='quiet')
	parser.add_argument('-v', '--verbose', action='store_true', help='verbose')
	args = vars(parser.parse_args())

	# Check if no arguements
	noargs = True
	for key in args:
		if key != 'quiet':
			if args[key] != None and args[key] != False:
				noargs = False

	# jstat behavior, qstat | grep $USER
	if noargs:
		try:
			grepped = sub.check_output('qstat | grep $USER', shell=True)
		except:
			sys.exit()
		sys.stdout.write(grepped)

	# return number of processors for user
	if args['number']:
		numprocs = userNumber(args['number'])

		sys.stdout.write(str(numprocs) + '/' + str(totalprocs))
		if not args['quiet']:
			valueBar(numprocs, totalprocs)
		else:
			sys.stdout.write('\n')

	# return number of processors for group
	if args['group']:
		if not args['group'] in groups:
			print 'Not a valid group'
			sys.exit()

		numprocs = groupNumber(args['group'], args['verbose'])

		sys.stdout.write('Total: ' + str(numprocs) + '/' + str(totalprocs))
		if not args['quiet']:
			valueBar(numprocs, totalprocs)
		else:
			sys.stdout.write('\n')

		proclim = totalprocs / 2
		sys.stdout.write('Limit: ' + str(numprocs) + '/' + str(proclim))
		if not args['quiet']:
			valueBar(numprocs, proclim)
		else:
			sys.stdout.write('\n')


	# return number of total processors being used
	if args['total']:
		try:
			grepped = sub.check_output('qstat -n -1', shell=True)
		except:
			print '0'
			sys.exit()
				
		grepped = '\n'.join(grepped.split('\n')[5:]) # remove header lines

		lined = grepped.split('\n')
		numprocs = 0
		for i, l in enumerate(lined):
			procs = l.split()
			if len(procs) != 0:
				if procs[9] == 'R':
					procs = procs[11] # take processor argument
					numprocs += procs.count('/')
		sys.stdout.write(str(numprocs) + '/' + str(totalprocs))
		if not args['quiet']:
			valueBar(numprocs, totalprocs)
		else:
			sys.stdout.write('\n')

		
	# return number of total processors being used
	if args['detail']:
		for i, g in enumerate(groups):
			numprocstotal = 0
			groupNames = groupUsers(g)
			sys.stdout.write(str(g)+ '\n')
			for j, n in enumerate(groupNames):
				numprocs = userNumber(n)
				numprocstotal += numprocs
				if numprocs > 0:
					sys.stdout.write(str(n)+ str((16 - len(n))*' ')+ str(numprocs)+ '\n')
			sys.stdout.write('TOTAL:\t'+ str(numprocstotal)+ '\n\n')




